(function (React$1, ReactDOM, d3) {
  'use strict';

  var React$1__default = 'default' in React$1 ? React$1['default'] : React$1;
  ReactDOM = ReactDOM && Object.prototype.hasOwnProperty.call(ReactDOM, 'default') ? ReactDOM['default'] : ReactDOM;

  const csvUrl ='https://gist.githubusercontent.com/curran/a9656d711a8ad31d812b8f9963ac441c/raw/267eac8b97d161c479d950ffad3ddd5ce2d1f370/MissingMigrants-Global-2019-10-08T09-47-14-subset.csv';

  const useData = ()=>{
  const [data, setData] = React$1.useState(null);
    if(data){
      console.log(data[0]);
    }

    React$1.useEffect(() => {
      const row = (d) => {
      d['Total Dead and Missing'] = +d['Total Dead and Missing'];
        d['Reported Date'] = new Date(d['Reported Date'] );
        return d;
      };
      d3.csv(csvUrl, row).then(setData );
    }, []);
  return data
  };

  const AxisBottom = ({
    xScale,
    innerHeight,
    tickFormat
  }) =>
    xScale.ticks().map((tickValue) => (
      React.createElement( 'g', { className: "tick", key: tickValue, transform: `translate(${xScale(
        tickValue
      )},0)` },
        React.createElement( 'line', { y2: innerHeight }),
        React.createElement( 'text', {
          style: { textAnchor: 'middle' }, y: innerHeight + 5, dy: "0.71rem" },
          tickFormat(tickValue)
        )
      )
    ));

  const AxisLeft = ({yScale,innerWidth}) => yScale.ticks().map((tickValue) => (
            
              React.createElement( 'g', { className: "tick", transform: `translate(0,${yScale(tickValue)})` },
        			React.createElement( 'line', { x2: innerWidth }), " //y1=", yScale(tickValue), " y2=", yScale(tickValue),
              React.createElement( 'text', {
                key: tickValue, style: { textAnchor: 'end' }, x: -5, dy: ".32em" },
                tickValue
              )
      )
            
          ));

  const Marks = ({
    binnedData,
    yScale,
    xScale,
    xValue,
    yValue,
    innerHeight,
    tooltip
   
  }) => (
    React.createElement( 'g', {  className: "mark" },
      React.createElement( 'path', {
       
        fill: "none", stroke: "black", d: d3.line()
          .x((d) => xScale(xValue(d)))
          .y((d) => yScale(yValue(d))).curve(d3.curveNatural)(binnedData) }),
      binnedData.map((d) => 
        
        React.createElement( 'rect', {
        
          x: xScale(d.x0), y: yScale(d.y), width: xScale(d.x1)-xScale(d.x0), height: innerHeight - yScale(d.y) },
          React.createElement( 'title', null, tooltip(d.y) )
        )
     
      )
    )
  );

  const width = window.innerWidth;
  const height = window.innerHeight;
  const margin = {
    top: 20,
    bottom: 60,
    right: 30,
    left: 100,
  };

  const App = () => {
    const data = useData();
    if (!data) {
      return React$1__default.createElement( 'pre', null, "loading.." );
    }

    const xValue = (d) => d['Reported Date'];
    const xAxisLabel = 'Date';

    const yValue = (d) =>
      d['Total Dead and Missing'];
    const yAxisLabel = 'Total Dead and Missing';

    const innerHeight =
      height - margin.top - margin.bottom;
    const innerWidth =
      width - margin.right - margin.left;

    const xScale = d3.scaleTime()
      .domain(d3.extent(data, xValue))
      .range([0, innerWidth])
      .nice();

   

    // d['Total Dead and Missing'] = +d['Total Dead and Missing']
    //      d['Reported Date'] = new Date(d['Reported Date'] )

    const xAxisTickFormat = d3.timeFormat('%m/%d/%Y');
    const [start, stop] = xScale.domain();
    const binnedData = d3.bin()
      .value(xValue)
      .domain(xScale.domain())
      .thresholds(d3.timeMonths(start, stop))(data)
      .map((array) => ({
        y: d3.sum(array, yValue),
        x0:array.x0,
         x1:array.x1
      }));
    
     const yScale = d3.scaleLinear()
      .domain([0,d3.max(binnedData, d=>d.y)])
      .range([innerHeight,0])
      .nice();
    console.log(binnedData);
   

    return (
      React$1__default.createElement( 'svg', { width: width, height: height },
        React$1__default.createElement( 'g', {
          transform: `translate(${margin.left},${margin.top})` },
          React$1__default.createElement( AxisBottom, {
            innerHeight: innerHeight, xScale: xScale, tickFormat: xAxisTickFormat }),
          React$1__default.createElement( AxisLeft, {
            yScale: yScale, innerWidth: innerWidth }),
          React$1__default.createElement( 'text', {
            className: "label", textAnchor: "middle", x: innerWidth / 2, y: height - margin.bottom / 2 },
            xAxisLabel
          ),
          React$1__default.createElement( 'text', {
            className: "label", textAnchor: "middle", transform: `translate(${
            -margin.left / 2
          },${innerHeight / 2}) rotate(-90)` },
            yAxisLabel
          ),
          React$1__default.createElement( Marks, {
            binnedData: binnedData, xScale: xScale, yScale: yScale, xValue: xValue, yValue: yValue, innerHeight: innerHeight, tooltip: d=> d })
        )
      )
    );
  };

  const rootElement = document.getElementById(
    'root'
  );
  ReactDOM.render(React$1__default.createElement( App, null ), rootElement);

}(React, ReactDOM, d3));

//# sourceMappingURL=data:application/json;charset=utf-8;base64,